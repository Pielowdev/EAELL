from flask import Flask, request, render_template, jsonify import requests import os from transformers import pipeline from duckduckgo_search import DDGS
app = Flask(name)
EXA_API_KEY = os.getenv('EXA_API_KEY')  # Set your Exa.ai API key in environment variables EXA_API_URL = 'https://api.exa.ai/search'  # Update if Exa.ai changes endpoint summarizer = pipeline('summarization', model='facebook/bart-large-cnn')
@app.route('/') def index(): return render_template('index.html')
@app.route('/search', methods=['POST']) def search(): query = request.form.get('query') if not query: return jsonify({'error': 'No query provided'}), 400 headers = {'Authorization': f'Bearer {EXA_API_KEY}'} payload = {'query': query} response = requests.post(EXA_API_URL, json=payload, headers=headers) if response.status_code == 200: results = response.json() # Prepare text for summarization result_texts = [] ddgs = DDGS() if 'results' in results: for item in results['results']: snippet = item.get('snippet', '') title = item.get('title', '') result_texts.append(f"{title}: {snippet}") # DuckDuckGo image search for each result image_url = None try: images = list(ddgs.images(title, max_results=1)) if images and 'image' in images[0]: image_url = images0]['image'] except Exception: image_url = None item['image_url'] = image_url summary = None if result_texts: try: text = " ".join(result_texts) # Hugging Face models have a max token limit, so truncate if needed if len(text) > 1024: text = text[:1024] summary_result = summarizer(text, max_length=80, min_length=20, do_sample=False) summary = summary_result0]['summary_text'] except Exception as e: summary = f"Error generating summary: {str(e)}" results['summary'] = summary return jsonify(results) else: return jsonify({'error': 'Search failed', 'details': response.text}), response.status_code
if name == 'main': app.run(debug=True)
